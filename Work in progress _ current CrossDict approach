from functions import *

### my files  - VLad
infile_read = "file1.txt.gz"
infile_res = "resistance_genes.fsa" 
   

# Read the sample file
Reads_list = f_gzip_extract_reads(infile_read)

# Read the resistance reference genes
Res_Dict = f_ResGeneDict_Kmers(infile_res)

# Create all kemers ( only forward are considered) and subset them for a depth
Reads_subset = f_Kmer_depth(Reads_list,depth_int)

# Cross checks both dictionaries for the presense of the KMERS in both
# atm outputs a separate list of ID's which gene kmers were found at least once
results = f_Dict_crosscheck(newRes_Dict, Reads_subset)



def f_gzip_extract_reads(filename):
    """ Opening a gzip file and extracting the reads"""
    print("Current function f_gzip_extract_reads")
    
    import gzip # import gzip to decompress .gz files
    reads_list = []
    line_count = 2
    with gzip.open(filename, 'rt') as f:
            for line in f:
        
                line_count += 1        
                if line_count % 4 == 0: # prints every 4th line (sequence line)
                
                    read_seq = line.rstrip()
                    reads_list.append(read_seq)
                    
                if line_count % 1000000 == 0:
                    print("Current line being read: ",line_count)
    
    f.close()
    print("f_gzip_extract_reads: complete!")
    return reads_list

def f_ResGeneDict_Kmers(infile):
    """ Create a dictionary of all resistace genes (keys) and their sequences (values,
    and a nested dictionary of positions (keys) and counts (as values)"""
    print("Current function f_ResGeneDict")
    ### Needs a TRY statement_________________________________________________
    
    # Kmer creation from Resistance Genes file
    ResFile = open(infile, "r")
    ### _____________________________________________________________________
    
    # Read Line by line
    # When ">" , assemble the sequence
    info = [] # info line
    ResGene_Dict = {}
    data = ''    
    for line in ResFile:
        if line.startswith('>'):
            if data:   # have collected a sequence, push to seqs
                ResGene_Dict[info] = {}
                ResGene_Dict[info][data]= {}
                for i in f_kmer_generator(data, 19):
                    ResGene_Dict[info][data][i]=0
                    if info == ">dfrD_1_Z50141 Trimethoprim resistance:":
                        print("Here")
                        break
                data = ''
            info = line[:-1]   # Trim '>' from beginning
            #ResGene_Dict[info]
        else:
            data += line.strip()
    # there will be yet one more to push when we run out
    ResGene_Dict[info] = {}
    ResGene_Dict[info][data]= {}
    for i in f_kmer_generator(data, 19):
        ResGene_Dict[info][data][i]=0
    print("f_ResGeneDict_Kmers: complete!")
    return ResGene_Dict

def f_kmer_generator(sequence, kmer_length):
    '''k-mer generator using list'''
    kmer_list = list()
    for i in range(0, len(sequence), 1):
        if (i < len(sequence)-kmer_length+1):
            kmer_list.append(sequence[i:i+kmer_length])
    return(kmer_list)
    
    
def f_Dict_crosscheck(newRes_Dict, Reads_subset):
    ### So here i can quickly check for the presence of the kmers in both dics
    ### If we construct a loop to go over each kmer for reference gene in turn and if complete
    ### create a file with the gene ID , coverage depth value ( which is set for the subselection)
    ### That could be a good output as a start??? 
    
    """ Cross check reads and resistance genes dictionaries, 
    check if the kmers are present in both and assign the count from 
    the reads dictionary"""
    try: 
        counter = 0
        inner = 0
        results = set()
        for key1 in newRes_Dict:    
            for key2 in newRes_Dict[key1]:
                for key3 in newRes_Dict[key1][key2]: # the inner key aka kmers
                    counter +=1
                    if key3 in Reads_subset:
                        results.add(key1)
                        inner += 1
                        newRes_Dict[key1][key2][key3]=Reads_subset[key3]
                    if inner % 100 == 0:
                        print("Inner count: ", inner)
                    if counter % 10 == 0:
                        print("Outer count: ",counter)
    except TypeError:
        print(key1, key2, key3,)
        #print(newRes_Dict[key1][key2], newRes_Dict[key1][key2][key3])   
  
    return results  
